/*

This example shows how the plumbing of the 0d runtime is connected.
What should be apparent is that this code can be trivially connected
at runtime (as is shown in `demo_drawio`) or generated by a metaprogram.

*/
package demo_basics

import "core:fmt"

import zd "../0d"

main :: proc() {
    fmt.println("*** Handmade Visibility Jam ***")

    fmt.println("--- Basics: Sequential ---")
    {
        echo_handler :: proc(eh: ^zd.Eh, message: zd.Message, data: any) {
            zd.send(eh, "stdout", message.datum.(string))
        }

        echo0 := zd.leaf_new ("10", echo_handler, 0)
        echo1 := zd.leaf_new ("11", echo_handler, 0)

        top := zd.make_container("Top")

        top.children = {
            echo0,
            echo1,
        }

        top.connections = {
            {.Down,   {nil, "stdin"},              {&top.children[0].input, "stdin"}},
            {.Across, {top.children[0], "stdout"}, {&top.children[1].input, "stdin"}},
            {.Up,     {top.children[1], "stdout"}, {&top.output, "stdout"}},
        }

        top.handler(top, zd.make_message("stdin", "hello"), 0)
        zd.print_output_list(top)
    }

    // fmt.println("--- Basics: Parallel ---")
    // {
    //     echo_handler :: proc(eh: ^zd.Eh, message: zd.Message) {
    //         zd.send(eh, "stdout", message.datum.(string))
    //     }

    //     top := zd.make_container("Top")

    //     top.children = {
    //         zd.make_leaf("20", echo_handler),
    //         zd.make_leaf("21", echo_handler),
    //     }

    //     top.connections = {
    //         {.Down, {nil, "stdin"},              {&top.children[0].input, "stdin"}},
    //         {.Down, {nil, "stdin"},              {&top.children[1].input, "stdin"}},
    //         {.Up,   {top.children[0], "stdout"}, {&top.output, "stdout"}},
    //         {.Up,   {top.children[1], "stdout"}, {&top.output, "stdout"}},
    //     }

    //     top.handler(top, zd.make_message("stdin", "hello"))
    //     zd.print_output_list(top)
    // }

}
