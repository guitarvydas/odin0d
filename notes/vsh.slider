no need to view this, see vsh-doc.txt instead



VSH
* use node-and-arrow diagrams to represent Linux shell scripts
* each node (rectangle) represents one Linux __command__ that can be found on the PATH
* a diagram compiles to a Bash-like pipeline taking input from __stdin__ and producing output to __stdout__

Relationship to Odin0D
* A rectangle is a Component
* A Leaf is a Linux ~/.bin __command__
* A Container is a shell script, e.g. xyz.bash
* diagrams express pipelines only, no attempt to express string variables
* 0D is implemented by Linux multithreading (Odin0D/0D is a multithreading kernel implemented in Odin, Linux is a multithreading kernel implemented in C)

Possible Implementations
* 1. diagram compiled to Bash pipeline syntax
* ....needs to use Bash to run the pipeline
* 2. diagram compiled to grash.c syntax
* ....needs to use Grash to run the pipeline

How to Build A Diagram Compiler in 9 Steps
* draw a diagram
* save the diagram as a __factbase__ of triples {relation, subject, object} (e.g. f(x,y))
* create __commands__ that inhale a __factbase__ then exhale the same __factbase__ augmented by new __facts__
* POC (2012) does all of this in 9 steps
* to build POC2012, we needed to create new Linux commands, standard tools were not sufficient
* POC2012 pipeline inhales XML (.graphml) and exhales .gsh file
* POC2012 then runs the .gsh file by using grash command

Echo
* in POC2012, 'echo' uses built-in Linux 'echo'
* in Odin0D, 'echo' uses a 'class' written in Odin code

Bash Syntax is a Poor Syntax for Linux Pipelines
* Bash (all shells) makes it easy to express __stdin__, __stdout__ and __stderr__
* Linux allows 16 inputs and 16 outputs, though
* Bash uses __text__ to express pipeline, but __text__ struggles to express multiple inputs and multiple outputs
* diagrams, e.g. draw.io, make it easier to express multiple inputs and multiple outputs

---

See Also
* Sethi paper "Control flow aspects of semantics directed compiling"
* Sethi used __textual__ pipeline syntax, very Bash-like, to write Denotational Semantics
* Sethi's syntax would have been simpler if he had used __node-and-arrow diagrams__ instead of __text__

---

Grash Overview
* grash is a pipeline interpreter
* syntax consists of __operations__ (e.g. Linux system calls)
* needs only 8 __operations__ to run a pipeline
* Grash is like Bash, with all of the non-essential stuff removed
* syntax is not restricted to a sequence of single lines

Grash Input and Output
* XXstdin__ is a __.gsh__ program source text
* XXside effectXX: the pipeline runs
* __stdout__ no output
*.... no output from Grash, but, maybe output from _.gsh__ script
